import state from "../json/mockReduxState";

const { getRoutesMetrics, getRoutesTree } = require.requireActual(
  "./selectors"
);

describe("Reselect selector getRouteMetrics", () =>
  test("returns an object of the metrics that have a key containing the string `route`", () => {
    expect(getRoutesMetrics(state)).toEqual({
      "route/ping/GET/status/200": {
        "1500416014314": 1,
        "1500416029215": 1,
        "1500416044215": 1,
        "1500416059217": 1,
        "1500416074215": 1,
        "1500416089215": 1,
        "1500416104216": 1,
        "1500416119215": 1,
        "1500416134216": 1
      },
      "route/ping/GET/time/200.count": {
        "1500416014314": 0,
        "1500416029215": 0,
        "1500416044215": 0,
        "1500416059217": 0,
        "1500416074215": 0,
        "1500416089215": 0,
        "1500416104216": 0,
        "1500416119215": 0,
        "1500416134216": 0
      },
      "route/ping/GET/status/2XX": {
        "1500416014314": 1,
        "1500416029215": 1,
        "1500416044215": 1,
        "1500416059217": 1,
        "1500416074215": 1,
        "1500416089215": 1,
        "1500416104216": 1,
        "1500416119215": 1,
        "1500416134216": 1
      },
      "route/ping/GET/requests": {
        "1500416014314": 1,
        "1500416029215": 1,
        "1500416044215": 1,
        "1500416059217": 1,
        "1500416074215": 1,
        "1500416089215": 1,
        "1500416104216": 1,
        "1500416119215": 1,
        "1500416134216": 1
      },
      "route/ping/GET/response_size.count": {
        "1500416014314": 0,
        "1500416029215": 0,
        "1500416044215": 0,
        "1500416059217": 0,
        "1500416074215": 0,
        "1500416089215": 0,
        "1500416104216": 0,
        "1500416119215": 0,
        "1500416134216": 0
      },
      "route/ping/GET/time.count": {
        "1500416014314": 0,
        "1500416029215": 0,
        "1500416044215": 0,
        "1500416059217": 0,
        "1500416074215": 0,
        "1500416089215": 0,
        "1500416104216": 0,
        "1500416119215": 0,
        "1500416134216": 0
      },
      "route/ping/GET/time/2XX.count": {
        "1500416014314": 0,
        "1500416029215": 0,
        "1500416044215": 0,
        "1500416059217": 0,
        "1500416074215": 0,
        "1500416089215": 0,
        "1500416104216": 0,
        "1500416119215": 0,
        "1500416134216": 0
      }
    });
  }));

describe("Reselect selector getRouteTree", () =>
  test("returns a hierarchical representation of the keys nested under their corresponding routes and HTTP verbs", () => {
    expect(getRoutesTree(state)).toEqual({
      "/ping": ["GET"]
    });
  }));

// TODO: Mock out a state object for the Reselect selectors

// Note: You'll need to refactor generateSidebarCards to make this easier to test
// The goal should be to refactor out an intermediate selector
// that produces an array of props objects, but doesn't actually pass them into
// <SidebarCard>
describe("getDashboards", () => {
  xtest("takes a state object and returns state.dashboards", () => {});
});
describe("getMetrics", () => {
  xtest("takes a state object and returns state.instance.metrics", () => {});
});
describe("generateSidebarCardProps", () => {
  //TODO: Do we need a enhance the selector to provide a better error condition here?
  xtest("returns undefined if state.dashboards is empty", () => {});
  xtest("returns a title prop equal to value.name", () => {});
  xtest("returns key and href props equal to key prepended by a /", () => {});
  xtest("returns an icon prop equal to value.summaryCard.icon", () => {});
  // etc etc etc. Use Istanbul test reported to
});

describe("generateSidebarCards", () => {
  xtest("maps over an array of props generated by generateSidebarCardProps and passes them into <SidebarCards>", () => {});
  // Any possible error checking that should happen here?
});
